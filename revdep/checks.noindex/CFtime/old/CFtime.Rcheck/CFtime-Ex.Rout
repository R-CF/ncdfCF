
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "CFtime"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('CFtime')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CFfactor")
> ### * CFfactor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CFfactor
> ### Title: Create a factor from the offsets in a 'CFTime' instance
> ### Aliases: CFfactor
> 
> ### ** Examples
> 
> t <- CFtime("days since 1949-12-01", "360_day", 19830:54029)
> 
> # Create a dekad factor for the whole time series
> f <- CFfactor(t, "dekad")
> 
> # Create three monthly factors for early, mid and late 21st century eras
> ep <- CFfactor(t, era = list(early = 2021:2040, mid = 2041:2060, late = 2061:2080))
> 
> 
> 
> cleanEx()
> nameEx("CFfactor_coverage")
> ### * CFfactor_coverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CFfactor_coverage
> ### Title: Coverage of time elements for each factor level
> ### Aliases: CFfactor_coverage
> 
> ### ** Examples
> 
> t <- CFtime("days since 2001-01-01", "365_day", 0:364)
> f <- CFfactor(t, "dekad")
> CFfactor_coverage(t, f, "absolute")
 [1] 10 10 11 10 10  8 10 10 11 10 10 10 10 10 11 10 10 10 10 10 11 10 10 11 10
[26] 10 10 10 10 11 10 10 10 10 10 11
> 
> 
> 
> cleanEx()
> nameEx("CFfactor_units")
> ### * CFfactor_units
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CFfactor_units
> ### Title: Number of base time units in each factor level
> ### Aliases: CFfactor_units
> 
> ### ** Examples
> 
> t <- CFtime("days since 2001-01-01", "365_day", 0:364)
> f <- CFfactor(t, "dekad")
> CFfactor_units(t, f)
 [1] 10 10 11 10 10  8 10 10 11 10 10 10 10 10 11 10 10 10 10 10 11 10 10 11 10
[26] 10 10 10 10 11 10 10 10 10 10 11
> 
> 
> 
> cleanEx()
> nameEx("CFtime-function")
> ### * CFtime-function
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CFtime-function
> ### Title: Create a CFTime object
> ### Aliases: CFtime-function CFtime
> 
> ### ** Examples
> 
> CFtime("days since 1850-01-01", "julian", 0:364)
CF calendar:
  Origin  : 1850-01-01T00:00:00
  Units   : days
  Type    : julian
Time series:
  Elements: [1850-01-01 .. 1850-12-31] (average of 1.000000 days between 365 elements)
  Bounds  : not set
> 
> CFtime("hours since 2023-01-01", "360_day", "2023-01-30T23:00")
CF calendar:
  Origin  : 2023-01-01T00:00:00
  Units   : hours
  Type    : 360_day
Time series:
  Element : 2023-01-30T23:00:00 
  Bounds  : not set
> 
> 
> 
> cleanEx()
> nameEx("as.character.CFTime")
> ### * as.character.CFTime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.character.CFTime
> ### Title: Return the timestamps contained in the 'CFTime' instance.
> ### Aliases: as.character.CFTime
> 
> ### ** Examples
> 
> t <- CFtime("days since 1850-01-01", "julian", 0:364)
> as.character(t)
  [1] "1850-01-01" "1850-01-02" "1850-01-03" "1850-01-04" "1850-01-05"
  [6] "1850-01-06" "1850-01-07" "1850-01-08" "1850-01-09" "1850-01-10"
 [11] "1850-01-11" "1850-01-12" "1850-01-13" "1850-01-14" "1850-01-15"
 [16] "1850-01-16" "1850-01-17" "1850-01-18" "1850-01-19" "1850-01-20"
 [21] "1850-01-21" "1850-01-22" "1850-01-23" "1850-01-24" "1850-01-25"
 [26] "1850-01-26" "1850-01-27" "1850-01-28" "1850-01-29" "1850-01-30"
 [31] "1850-01-31" "1850-02-01" "1850-02-02" "1850-02-03" "1850-02-04"
 [36] "1850-02-05" "1850-02-06" "1850-02-07" "1850-02-08" "1850-02-09"
 [41] "1850-02-10" "1850-02-11" "1850-02-12" "1850-02-13" "1850-02-14"
 [46] "1850-02-15" "1850-02-16" "1850-02-17" "1850-02-18" "1850-02-19"
 [51] "1850-02-20" "1850-02-21" "1850-02-22" "1850-02-23" "1850-02-24"
 [56] "1850-02-25" "1850-02-26" "1850-02-27" "1850-02-28" "1850-03-01"
 [61] "1850-03-02" "1850-03-03" "1850-03-04" "1850-03-05" "1850-03-06"
 [66] "1850-03-07" "1850-03-08" "1850-03-09" "1850-03-10" "1850-03-11"
 [71] "1850-03-12" "1850-03-13" "1850-03-14" "1850-03-15" "1850-03-16"
 [76] "1850-03-17" "1850-03-18" "1850-03-19" "1850-03-20" "1850-03-21"
 [81] "1850-03-22" "1850-03-23" "1850-03-24" "1850-03-25" "1850-03-26"
 [86] "1850-03-27" "1850-03-28" "1850-03-29" "1850-03-30" "1850-03-31"
 [91] "1850-04-01" "1850-04-02" "1850-04-03" "1850-04-04" "1850-04-05"
 [96] "1850-04-06" "1850-04-07" "1850-04-08" "1850-04-09" "1850-04-10"
[101] "1850-04-11" "1850-04-12" "1850-04-13" "1850-04-14" "1850-04-15"
[106] "1850-04-16" "1850-04-17" "1850-04-18" "1850-04-19" "1850-04-20"
[111] "1850-04-21" "1850-04-22" "1850-04-23" "1850-04-24" "1850-04-25"
[116] "1850-04-26" "1850-04-27" "1850-04-28" "1850-04-29" "1850-04-30"
[121] "1850-05-01" "1850-05-02" "1850-05-03" "1850-05-04" "1850-05-05"
[126] "1850-05-06" "1850-05-07" "1850-05-08" "1850-05-09" "1850-05-10"
[131] "1850-05-11" "1850-05-12" "1850-05-13" "1850-05-14" "1850-05-15"
[136] "1850-05-16" "1850-05-17" "1850-05-18" "1850-05-19" "1850-05-20"
[141] "1850-05-21" "1850-05-22" "1850-05-23" "1850-05-24" "1850-05-25"
[146] "1850-05-26" "1850-05-27" "1850-05-28" "1850-05-29" "1850-05-30"
[151] "1850-05-31" "1850-06-01" "1850-06-02" "1850-06-03" "1850-06-04"
[156] "1850-06-05" "1850-06-06" "1850-06-07" "1850-06-08" "1850-06-09"
[161] "1850-06-10" "1850-06-11" "1850-06-12" "1850-06-13" "1850-06-14"
[166] "1850-06-15" "1850-06-16" "1850-06-17" "1850-06-18" "1850-06-19"
[171] "1850-06-20" "1850-06-21" "1850-06-22" "1850-06-23" "1850-06-24"
[176] "1850-06-25" "1850-06-26" "1850-06-27" "1850-06-28" "1850-06-29"
[181] "1850-06-30" "1850-07-01" "1850-07-02" "1850-07-03" "1850-07-04"
[186] "1850-07-05" "1850-07-06" "1850-07-07" "1850-07-08" "1850-07-09"
[191] "1850-07-10" "1850-07-11" "1850-07-12" "1850-07-13" "1850-07-14"
[196] "1850-07-15" "1850-07-16" "1850-07-17" "1850-07-18" "1850-07-19"
[201] "1850-07-20" "1850-07-21" "1850-07-22" "1850-07-23" "1850-07-24"
[206] "1850-07-25" "1850-07-26" "1850-07-27" "1850-07-28" "1850-07-29"
[211] "1850-07-30" "1850-07-31" "1850-08-01" "1850-08-02" "1850-08-03"
[216] "1850-08-04" "1850-08-05" "1850-08-06" "1850-08-07" "1850-08-08"
[221] "1850-08-09" "1850-08-10" "1850-08-11" "1850-08-12" "1850-08-13"
[226] "1850-08-14" "1850-08-15" "1850-08-16" "1850-08-17" "1850-08-18"
[231] "1850-08-19" "1850-08-20" "1850-08-21" "1850-08-22" "1850-08-23"
[236] "1850-08-24" "1850-08-25" "1850-08-26" "1850-08-27" "1850-08-28"
[241] "1850-08-29" "1850-08-30" "1850-08-31" "1850-09-01" "1850-09-02"
[246] "1850-09-03" "1850-09-04" "1850-09-05" "1850-09-06" "1850-09-07"
[251] "1850-09-08" "1850-09-09" "1850-09-10" "1850-09-11" "1850-09-12"
[256] "1850-09-13" "1850-09-14" "1850-09-15" "1850-09-16" "1850-09-17"
[261] "1850-09-18" "1850-09-19" "1850-09-20" "1850-09-21" "1850-09-22"
[266] "1850-09-23" "1850-09-24" "1850-09-25" "1850-09-26" "1850-09-27"
[271] "1850-09-28" "1850-09-29" "1850-09-30" "1850-10-01" "1850-10-02"
[276] "1850-10-03" "1850-10-04" "1850-10-05" "1850-10-06" "1850-10-07"
[281] "1850-10-08" "1850-10-09" "1850-10-10" "1850-10-11" "1850-10-12"
[286] "1850-10-13" "1850-10-14" "1850-10-15" "1850-10-16" "1850-10-17"
[291] "1850-10-18" "1850-10-19" "1850-10-20" "1850-10-21" "1850-10-22"
[296] "1850-10-23" "1850-10-24" "1850-10-25" "1850-10-26" "1850-10-27"
[301] "1850-10-28" "1850-10-29" "1850-10-30" "1850-10-31" "1850-11-01"
[306] "1850-11-02" "1850-11-03" "1850-11-04" "1850-11-05" "1850-11-06"
[311] "1850-11-07" "1850-11-08" "1850-11-09" "1850-11-10" "1850-11-11"
[316] "1850-11-12" "1850-11-13" "1850-11-14" "1850-11-15" "1850-11-16"
[321] "1850-11-17" "1850-11-18" "1850-11-19" "1850-11-20" "1850-11-21"
[326] "1850-11-22" "1850-11-23" "1850-11-24" "1850-11-25" "1850-11-26"
[331] "1850-11-27" "1850-11-28" "1850-11-29" "1850-11-30" "1850-12-01"
[336] "1850-12-02" "1850-12-03" "1850-12-04" "1850-12-05" "1850-12-06"
[341] "1850-12-07" "1850-12-08" "1850-12-09" "1850-12-10" "1850-12-11"
[346] "1850-12-12" "1850-12-13" "1850-12-14" "1850-12-15" "1850-12-16"
[351] "1850-12-17" "1850-12-18" "1850-12-19" "1850-12-20" "1850-12-21"
[356] "1850-12-22" "1850-12-23" "1850-12-24" "1850-12-25" "1850-12-26"
[361] "1850-12-27" "1850-12-28" "1850-12-29" "1850-12-30" "1850-12-31"
> 
> 
> 
> cleanEx()
> nameEx("as_timestamp")
> ### * as_timestamp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_timestamp
> ### Title: Create a vector that represents CF timestamps
> ### Aliases: as_timestamp
> 
> ### ** Examples
> 
> t <- CFtime("hours since 2020-01-01", "standard", seq(0, 24, by = 0.25))
> as_timestamp(t, "timestamp")
 [1] "2020-01-01T00:00:00" "2020-01-01T00:15:00" "2020-01-01T00:30:00"
 [4] "2020-01-01T00:45:00" "2020-01-01T01:00:00" "2020-01-01T01:15:00"
 [7] "2020-01-01T01:30:00" "2020-01-01T01:45:00" "2020-01-01T02:00:00"
[10] "2020-01-01T02:15:00" "2020-01-01T02:30:00" "2020-01-01T02:45:00"
[13] "2020-01-01T03:00:00" "2020-01-01T03:15:00" "2020-01-01T03:30:00"
[16] "2020-01-01T03:45:00" "2020-01-01T04:00:00" "2020-01-01T04:15:00"
[19] "2020-01-01T04:30:00" "2020-01-01T04:45:00" "2020-01-01T05:00:00"
[22] "2020-01-01T05:15:00" "2020-01-01T05:30:00" "2020-01-01T05:45:00"
[25] "2020-01-01T06:00:00" "2020-01-01T06:15:00" "2020-01-01T06:30:00"
[28] "2020-01-01T06:45:00" "2020-01-01T07:00:00" "2020-01-01T07:15:00"
[31] "2020-01-01T07:30:00" "2020-01-01T07:45:00" "2020-01-01T08:00:00"
[34] "2020-01-01T08:15:00" "2020-01-01T08:30:00" "2020-01-01T08:45:00"
[37] "2020-01-01T09:00:00" "2020-01-01T09:15:00" "2020-01-01T09:30:00"
[40] "2020-01-01T09:45:00" "2020-01-01T10:00:00" "2020-01-01T10:15:00"
[43] "2020-01-01T10:30:00" "2020-01-01T10:45:00" "2020-01-01T11:00:00"
[46] "2020-01-01T11:15:00" "2020-01-01T11:30:00" "2020-01-01T11:45:00"
[49] "2020-01-01T12:00:00" "2020-01-01T12:15:00" "2020-01-01T12:30:00"
[52] "2020-01-01T12:45:00" "2020-01-01T13:00:00" "2020-01-01T13:15:00"
[55] "2020-01-01T13:30:00" "2020-01-01T13:45:00" "2020-01-01T14:00:00"
[58] "2020-01-01T14:15:00" "2020-01-01T14:30:00" "2020-01-01T14:45:00"
[61] "2020-01-01T15:00:00" "2020-01-01T15:15:00" "2020-01-01T15:30:00"
[64] "2020-01-01T15:45:00" "2020-01-01T16:00:00" "2020-01-01T16:15:00"
[67] "2020-01-01T16:30:00" "2020-01-01T16:45:00" "2020-01-01T17:00:00"
[70] "2020-01-01T17:15:00" "2020-01-01T17:30:00" "2020-01-01T17:45:00"
[73] "2020-01-01T18:00:00" "2020-01-01T18:15:00" "2020-01-01T18:30:00"
[76] "2020-01-01T18:45:00" "2020-01-01T19:00:00" "2020-01-01T19:15:00"
[79] "2020-01-01T19:30:00" "2020-01-01T19:45:00" "2020-01-01T20:00:00"
[82] "2020-01-01T20:15:00" "2020-01-01T20:30:00" "2020-01-01T20:45:00"
[85] "2020-01-01T21:00:00" "2020-01-01T21:15:00" "2020-01-01T21:30:00"
[88] "2020-01-01T21:45:00" "2020-01-01T22:00:00" "2020-01-01T22:15:00"
[91] "2020-01-01T22:30:00" "2020-01-01T22:45:00" "2020-01-01T23:00:00"
[94] "2020-01-01T23:15:00" "2020-01-01T23:30:00" "2020-01-01T23:45:00"
[97] "2020-01-02T00:00:00"
> 
> t2 <- CFtime("days since 2002-01-21", "standard", 0:20)
> tail(as_timestamp(t2, asPOSIX = TRUE))
[1] "2002-02-05 GMT" "2002-02-06 GMT" "2002-02-07 GMT" "2002-02-08 GMT"
[5] "2002-02-09 GMT" "2002-02-10 GMT"
> 
> tail(as_timestamp(t2))
[1] "2002-02-05" "2002-02-06" "2002-02-07" "2002-02-08" "2002-02-09"
[6] "2002-02-10"
> 
> tail(as_timestamp(t2 + 1.5))
Warning: Offsets not monotonically increasing.
[1] "2002-02-06T00:00:00" "2002-02-07T00:00:00" "2002-02-08T00:00:00"
[4] "2002-02-09T00:00:00" "2002-02-10T00:00:00" "2002-01-22T12:00:00"
> 
> 
> 
> cleanEx()
> nameEx("bounds")
> ### * bounds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bounds
> ### Title: Bounds of the time offsets
> ### Aliases: bounds bounds<-
> 
> ### ** Examples
> 
> t <- CFtime("days since 2024-01-01", "standard", seq(0.5, by = 1, length.out = 366))
> as_timestamp(t)[1:3]
[1] "2024-01-01T12:00:00" "2024-01-02T12:00:00" "2024-01-03T12:00:00"
> bounds(t) <- rbind(0:365, 1:366)
> bounds(t)[, 1:3]
     [,1] [,2] [,3]
[1,]    0    1    2
[2,]    1    2    3
> bounds(t, "%d-%b-%Y")[, 1:3]
     [,1]          [,2]          [,3]         
[1,] "01-Jan-2024" "02-Jan-2024" "03-Jan-2024"
[2,] "02-Jan-2024" "03-Jan-2024" "04-Jan-2024"
> 
> 
> 
> cleanEx()
> nameEx("cut.CFTime")
> ### * cut.CFTime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cut.CFTime
> ### Title: Create a factor for a 'CFTime' instance
> ### Aliases: cut.CFTime cut
> 
> ### ** Examples
> 
> x <- CFtime("days since 2021-01-01", "365_day", 0:729)
> breaks <- c("2022-02-01", "2021-12-01", "2023-01-01")
> cut(x, breaks)
  [1] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
  [7] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [13] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [19] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [25] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [31] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [37] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [43] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [49] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [55] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [61] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [67] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [73] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [79] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [85] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [91] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
 [97] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[103] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[109] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[115] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[121] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[127] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[133] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[139] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[145] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[151] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[157] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[163] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[169] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[175] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[181] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[187] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[193] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[199] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[205] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[211] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[217] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[223] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[229] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[235] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[241] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[247] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[253] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[259] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[265] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[271] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[277] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[283] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[289] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[295] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[301] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[307] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[313] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[319] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[325] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>      
[331] <NA>       <NA>       <NA>       <NA>       2021-12-01 2021-12-01
[337] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01
[343] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01
[349] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01
[355] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01
[361] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01
[367] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01
[373] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01
[379] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01
[385] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01
[391] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01
[397] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[403] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[409] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[415] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[421] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[427] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[433] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[439] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[445] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[451] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[457] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[463] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[469] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[475] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[481] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[487] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[493] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[499] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[505] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[511] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[517] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[523] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[529] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[535] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[541] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[547] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[553] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[559] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[565] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[571] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[577] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[583] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[589] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[595] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[601] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[607] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[613] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[619] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[625] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[631] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[637] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[643] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[649] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[655] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[661] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[667] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[673] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[679] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[685] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[691] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[697] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[703] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[709] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[715] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[721] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01
[727] 2022-02-01 2022-02-01 2022-02-01 2022-02-01
attr(,"period")
[1] day
attr(,"era")
[1] -1
attr(,"CFTime")
CF calendar:
  Origin  : 2021-01-01T00:00:00
  Units   : days
  Type    : 365_day
Time series:
  Elements: [2022-01-01 .. 2022-07-18] (average of 198.000000 days between 2 elements)
  Bounds  : set
Levels: 2021-12-01 2022-02-01
> 
> 
> 
> cleanEx()
> nameEx("equals-.CFTime")
> ### * equals-.CFTime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ==.CFTime
> ### Title: Equivalence of CFTime objects
> ### Aliases: ==.CFTime CFtime-equivalent
> 
> ### ** Examples
> 
> e1 <- CFtime("days since 1850-01-01", "gregorian", 0:364)
> e2 <- CFtime("days since 1850-01-01 00:00:00", "standard", 0:364)
> e1 == e2
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("indexOf")
> ### * indexOf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: indexOf
> ### Title: Find the index of timestamps in the time series
> ### Aliases: indexOf
> 
> ### ** Examples
> 
> cf <- CFtime("days since 2020-01-01", "360_day", 1440:1799 + 0.5)
> as_timestamp(cf)[1:3]
[1] "2024-01-01T12:00:00" "2024-01-02T12:00:00" "2024-01-03T12:00:00"
> x <- c("2024-01-01", "2024-01-02", "2024-01-03")
> indexOf(x, cf)
[1] NA  1  2
attr(,"CFTime")
CF calendar:
  Origin  : 2020-01-01T00:00:00
  Units   : days
  Type    : 360_day
Time series:
  Elements: [2024-01-02 .. 2024-01-03] (average of 1.000000 days between 2 elements)
  Bounds  : not set
> indexOf(x, cf, method = "linear")
[1]  NA 1.5 2.5
attr(,"CFTime")
CF calendar:
  Origin  : 2020-01-01T00:00:00
  Units   : days
  Type    : 360_day
Time series:
  Elements: [2024-01-02 .. 2024-01-03] (average of 1.000000 days between 2 elements)
  Bounds  : not set
> 
> bounds(cf) <- TRUE
> indexOf(x, cf)
[1] 1 2 3
attr(,"CFTime")
CF calendar:
  Origin  : 2020-01-01T00:00:00
  Units   : days
  Type    : 360_day
Time series:
  Elements: [2024-01-01 .. 2024-01-03] (average of 1.000000 days between 3 elements)
  Bounds  : set
> 
> # Non-existent calendar day in a `360_day` calendar
> x <- c("2024-03-30", "2024-03-31", "2024-04-01")
> indexOf(x, cf)
[1] 90 NA 91
attr(,"CFTime")
CF calendar:
  Origin  : 2020-01-01T00:00:00
  Units   : days
  Type    : 360_day
Time series:
  Elements: [2024-03-30 .. 2024-04-01] (average of 1.000000 days between 2 elements)
  Bounds  : set
> 
> # Numeric x
> indexOf(c(29, 30, 31), cf)
[1] 29 30 31
attr(,"CFTime")
CF calendar:
  Origin  : 2020-01-01T00:00:00
  Units   : days
  Type    : 360_day
Time series:
  Elements: [2024-01-29T12:00:00 .. 2024-02-01T12:00:00] (average of 1.000000 days between 3 elements)
  Bounds  : set
> 
> 
> 
> cleanEx()
> nameEx("is_complete")
> ### * is_complete
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_complete
> ### Title: Indicates if the time series is complete
> ### Aliases: is_complete
> 
> ### ** Examples
> 
> t <- CFtime("days since 1850-01-01", "julian", 0:364)
> is_complete(t)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("length.CFTime")
> ### * length.CFTime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: length.CFTime
> ### Title: The length of the offsets contained in the 'CFTime' instance.
> ### Aliases: length.CFTime
> 
> ### ** Examples
> 
> t <- CFtime("days since 1850-01-01", "julian", 0:364)
> length(t)
[1] 365
> 
> 
> 
> cleanEx()
> nameEx("month_days")
> ### * month_days
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: month_days
> ### Title: Return the number of days in a month given a certain CF calendar
> ### Aliases: month_days
> 
> ### ** Examples
> 
> dates <- c("2021-11-27", "2021-12-10", "2022-01-14", "2022-02-18")
> t <- CFtime("days since 1850-01-01", "standard")
> month_days(t, dates)
[1] 30 31 31 28
> 
> t <- CFtime("days since 1850-01-01", "360_day")
> month_days(t, dates)
[1] 30 30 30 30
> 
> t <- CFtime("days since 1850-01-01", "all_leap")
> month_days(t, dates)
[1] 30 31 31 29
> 
> month_days(t)
 [1] 31 29 31 30 31 30 31 31 30 31 30 31
> 
> 
> 
> cleanEx()
> nameEx("parse_timestamps")
> ### * parse_timestamps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parse_timestamps
> ### Title: Parse series of timestamps in CF format to date-time elements
> ### Aliases: parse_timestamps
> 
> ### ** Examples
> 
> t <- CFtime("days since 0001-01-01", "proleptic_gregorian")
> 
> # This will have `NA`s on output and generate a warning
> timestamps <- c("2012-01-01T12:21:34Z", "12-1-23", "today",
+                 "2022-08-16T11:07:34.45-10", "2022-08-16 10.5+04")
> parse_timestamps(t, timestamps)
Warning in parse_timestamps(t, timestamps) :
  Some dates could not be parsed. Result contains `NA` values.
Warning in parse_timestamps(t, timestamps) :
  Timestamps have multiple time zones. Some or all may be different from the calendar time zone.
  year month day hour minute second    tz   offset
1 2012     1   1   12     21  34.00 +0000 734502.5
2   12     1  23    0      0   0.00 +0000   4039.0
3   NA    NA  NA   NA     NA     NA  <NA>       NA
4 2022     8  16   11      7  34.45 -1000 738382.5
5 2022     8  16   10     30   0.00 +0400 738382.4
> 
> 
> 
> cleanEx()
> nameEx("plus-.CFTime")
> ### * plus-.CFTime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: +.CFTime
> ### Title: Extend a CFTime object
> ### Aliases: +.CFTime CFtime-merge
> 
> ### ** Examples
> 
> e1 <- CFtime("days since 1850-01-01", "gregorian", 0:364)
> e2 <- CFtime("days since 1850-01-01 00:00:00", "standard", 365:729)
> e1 + e2
CF calendar:
  Origin  : 1850-01-01T00:00:00
  Units   : days
  Type    : standard
Time series:
  Elements: [1850-01-01 .. 1851-12-31] (average of 1.000000 days between 730 elements)
  Bounds  : not set
> 
> 
> 
> cleanEx()
> nameEx("properties")
> ### * properties
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: definition
> ### Title: Properties of a CFTime object
> ### Aliases: definition properties calendar unit origin timezone offsets
> ###   resolution
> 
> ### ** Examples
> 
> t <- CFtime("days since 1850-01-01", "julian", 0:364)
> definition(t)
[1] "days since 1850-01-01"
> calendar(t)
[1] "julian"
> unit(t)
[1] "days"
> timezone(t)
[1] "+0000"
> origin(t)
  year month day hour minute second    tz offset
1 1850     1   1    0      0      0 +0000      0
> offsets(t)
  [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
 [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
 [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
 [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
 [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
 [91]  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
[109] 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
[127] 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
[145] 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
[163] 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
[181] 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
[199] 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
[217] 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
[235] 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
[253] 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
[271] 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
[289] 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
[307] 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
[325] 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
[343] 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
[361] 360 361 362 363 364
> resolution(t)
[1] 1
> 
> 
> 
> cleanEx()
> nameEx("range.CFTime")
> ### * range.CFTime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: range.CFTime
> ### Title: Extreme time series values
> ### Aliases: range.CFTime
> 
> ### ** Examples
> 
> cf <- CFtime("days since 1850-01-01", "julian", 0:364)
> range(cf)
[1] "1850-01-01" "1850-12-31"
> range(cf, "%Y-%b-%e")
[1] "1850-Jan- 1" "1850-Dec-31"
> 
> 
> 
> cleanEx()
> nameEx("slice")
> ### * slice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: slice
> ### Title: Which time steps fall within extreme values
> ### Aliases: slice
> 
> ### ** Examples
> 
> t <- CFtime("hours since 2023-01-01 00:00:00", "standard", 0:23)
> slice(t, c("2022-12-01", "2023-01-01 03:00"))
 [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
attr(,"CFTime")
CF calendar:
  Origin  : 2023-01-01T00:00:00
  Units   : hours
  Type    : standard
Time series:
  Elements: [2023-01-01T00:00:00 .. 2023-01-01T02:00:00] (average of 1.000000 hours between 3 elements)
  Bounds  : not set
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.546 0.028 0.71 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
