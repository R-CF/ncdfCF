% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CFAxisVertical.R
\docType{class}
\name{CFAxisVertical}
\alias{CFAxisVertical}
\title{Vertical CF axis object}
\description{
This class represents a vertical axis, which may be parametric.
A regular vertical axis behaves like any other numeric axis. A parametric
vertical axis, on the other hand, is defined through an index value that is
contained in the axis coordinates, with additional data variables that hold
ancillary "formula terms" with which to calculate dimensional axis
coordinates. It is used in atmosphere and ocean data sets.

Parametric vertical axes can only be read from file, not created from
scratch.
}
\references{
https://cfconventions.org/Data/cf-conventions/cf-conventions.html#parametric-vertical-coordinate
https://www.myroms.org/wiki/Vertical_S-coordinate
}
\section{Super classes}{
\code{\link[ncdfCF:CFObject]{ncdfCF::CFObject}} -> \code{\link[ncdfCF:CFAxis]{ncdfCF::CFAxis}} -> \code{\link[ncdfCF:CFAxisNumeric]{ncdfCF::CFAxisNumeric}} -> \code{CFAxisVertical}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{friendlyClassName}}{(read-only) A nice description of the class.}

\item{\code{formula_terms}}{(read-only) A \code{data.frame} with the "formula_terms"
to calculate the parametric axis values.}

\item{\code{is_parametric}}{(read-only) Logical flag that indicates if the
coordinates of the axis are parametric.}

\item{\code{parametric_coordinates}}{(read-only) Retrieve the parametric
coordinates of this vertical axis as a \link{CFVariable}.}

\item{\code{computed_name}}{(read-only) The name of the computed parameterised
coordinates. If the parameterised coordinates have not been computed yet
the computed name is an empty string.}

\item{\code{computed_units}}{(read-only) Return the units of the computed
parameterised coordinates, if computed, otherwise return \code{NULL}. This
will access the standard names table.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CFAxisVertical-new}{\code{CFAxisVertical$new()}}
\item \href{#method-CFAxisVertical-detach}{\code{CFAxisVertical$detach()}}
\item \href{#method-CFAxisVertical-copy}{\code{CFAxisVertical$copy()}}
\item \href{#method-CFAxisVertical-copy_with_values}{\code{CFAxisVertical$copy_with_values()}}
\item \href{#method-CFAxisVertical-copy_terms}{\code{CFAxisVertical$copy_terms()}}
\item \href{#method-CFAxisVertical-configure_terms}{\code{CFAxisVertical$configure_terms()}}
\item \href{#method-CFAxisVertical-parametric_subset}{\code{CFAxisVertical$parametric_subset()}}
\item \href{#method-CFAxisVertical-append}{\code{CFAxisVertical$append()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFObject" data-id="append_attribute"><a href='../../ncdfCF/html/CFObject.html#method-CFObject-append_attribute'><code>ncdfCF::CFObject$append_attribute()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFObject" data-id="attribute"><a href='../../ncdfCF/html/CFObject.html#method-CFObject-attribute'><code>ncdfCF::CFObject$attribute()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFObject" data-id="delete_attribute"><a href='../../ncdfCF/html/CFObject.html#method-CFObject-delete_attribute'><code>ncdfCF::CFObject$delete_attribute()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFObject" data-id="dim"><a href='../../ncdfCF/html/CFObject.html#method-CFObject-dim'><code>ncdfCF::CFObject$dim()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFObject" data-id="print_attributes"><a href='../../ncdfCF/html/CFObject.html#method-CFObject-print_attributes'><code>ncdfCF::CFObject$print_attributes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFObject" data-id="set_attribute"><a href='../../ncdfCF/html/CFObject.html#method-CFObject-set_attribute'><code>ncdfCF::CFObject$set_attribute()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFObject" data-id="update_coordinates_attribute"><a href='../../ncdfCF/html/CFObject.html#method-CFObject-update_coordinates_attribute'><code>ncdfCF::CFObject$update_coordinates_attribute()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFObject" data-id="write_attributes"><a href='../../ncdfCF/html/CFObject.html#method-CFObject-write_attributes'><code>ncdfCF::CFObject$write_attributes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxis" data-id="can_append"><a href='../../ncdfCF/html/CFAxis.html#method-CFAxis-can_append'><code>ncdfCF::CFAxis$can_append()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxis" data-id="peek"><a href='../../ncdfCF/html/CFAxis.html#method-CFAxis-peek'><code>ncdfCF::CFAxis$peek()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxis" data-id="shard"><a href='../../ncdfCF/html/CFAxis.html#method-CFAxis-shard'><code>ncdfCF::CFAxis$shard()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxis" data-id="write"><a href='../../ncdfCF/html/CFAxis.html#method-CFAxis-write'><code>ncdfCF::CFAxis$write()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxisNumeric" data-id="brief"><a href='../../ncdfCF/html/CFAxisNumeric.html#method-CFAxisNumeric-brief'><code>ncdfCF::CFAxisNumeric$brief()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxisNumeric" data-id="identical"><a href='../../ncdfCF/html/CFAxisNumeric.html#method-CFAxisNumeric-identical'><code>ncdfCF::CFAxisNumeric$identical()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxisNumeric" data-id="indexOf"><a href='../../ncdfCF/html/CFAxisNumeric.html#method-CFAxisNumeric-indexOf'><code>ncdfCF::CFAxisNumeric$indexOf()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxisNumeric" data-id="print"><a href='../../ncdfCF/html/CFAxisNumeric.html#method-CFAxisNumeric-print'><code>ncdfCF::CFAxisNumeric$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxisNumeric" data-id="range"><a href='../../ncdfCF/html/CFAxisNumeric.html#method-CFAxisNumeric-range'><code>ncdfCF::CFAxisNumeric$range()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxisNumeric" data-id="slice"><a href='../../ncdfCF/html/CFAxisNumeric.html#method-CFAxisNumeric-slice'><code>ncdfCF::CFAxisNumeric$slice()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ncdfCF" data-topic="CFAxisNumeric" data-id="subset"><a href='../../ncdfCF/html/CFAxisNumeric.html#method-CFAxisNumeric-subset'><code>ncdfCF::CFAxisNumeric$subset()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CFAxisVertical-new"></a>}}
\if{latex}{\out{\hypertarget{method-CFAxisVertical-new}{}}}
\subsection{Method \code{new()}}{
Create a new instance of this class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CFAxisVertical$new(
  var,
  values,
  start = 1L,
  count = NA,
  attributes = data.frame()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{var}}{The name of the axis when creating a new axis. When reading an
axis from file, the \link{NCVariable} object that describes this instance.}

\item{\code{values}}{Optional. The values of the axis in a vector. The values
have to be numeric and monotonic. Ignored when argument \code{var} is a
\code{NCVariable} object.}

\item{\code{start}}{Optional. Integer index where to start reading axis data
from file. The index may be \code{NA} to start reading data from the start.}

\item{\code{count}}{Optional. Number of elements to read from file. This may be
\code{NA} to read to the end of the data.}

\item{\code{attributes}}{Optional. A \code{data.frame} with the attributes of the
axis. When an empty \code{data.frame} (default) and argument \code{var} is an
\code{NCVariable} instance, attributes of the axis will be taken from the
netCDF resource.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CFAxisVertical-detach"></a>}}
\if{latex}{\out{\hypertarget{method-CFAxisVertical-detach}{}}}
\subsection{Method \code{detach()}}{
Detach the parametric terms from an underlying netCDF
resource.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CFAxisVertical$detach()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CFAxisVertical-copy"></a>}}
\if{latex}{\out{\hypertarget{method-CFAxisVertical-copy}{}}}
\subsection{Method \code{copy()}}{
Create a copy of this axis. The copy is completely separate
from \code{self}, meaning that both \code{self} and all of its components are made
from new instances. Note that the parametric terms, if any, are not
copied here. If needed, copy the terms by calling the \code{copy_terms()}
method \strong{after} all axes that the terms refer to have been copied to, as
appropriate.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CFAxisVertical$copy(name = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name for the new axis. If an empty string is passed, will
use the name of this axis.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The newly created axis.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CFAxisVertical-copy_with_values"></a>}}
\if{latex}{\out{\hypertarget{method-CFAxisVertical-copy_with_values}{}}}
\subsection{Method \code{copy_with_values()}}{
Create a copy of this axis but using the supplied values.
The attributes are copied to the new axis. Boundary values, parametric
coordinates and auxiliary coordinates are not copied.

After this operation the attributes of the newly created axes may not
be accurate, except for the "actual_range" attribute. The calling code
should set, modify or delete attributes as appropriate.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CFAxisVertical$copy_with_values(name = "", values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name for the new axis. If an empty string is passed, will
use the name of this axis.}

\item{\code{values}}{The values to the used with the copy of this axis.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The newly created axis.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CFAxisVertical-copy_terms"></a>}}
\if{latex}{\out{\hypertarget{method-CFAxisVertical-copy_terms}{}}}
\subsection{Method \code{copy_terms()}}{
Copy the parametric terms from \code{from} to this axis. The
parametric terms will be configured in this axis.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CFAxisVertical$copy_terms(from, original_axes, new_axes)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{from}}{The \code{NCGroup} from which references to the parametric terms
are accessible.}

\item{\code{original_axes}}{List of \code{CFAxis} instances from the CF object that
these parametric terms are copied from.}

\item{\code{new_axes}}{List of \code{CFAxis} instances to use with the formula term
objects.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CFAxisVertical-configure_terms"></a>}}
\if{latex}{\out{\hypertarget{method-CFAxisVertical-configure_terms}{}}}
\subsection{Method \code{configure_terms()}}{
Configure the formula terms of a parametric vertical axis.
If the vertical axis has a \code{formula_terms} attribute it has a
parametric coordinate space that is calculated from the formula terms.
This method sets up the axis instance to calculate the dimensional
coordinate space (but it does not do the actual calculation; access the
\code{parametric_coordinates} field to get the dimensional coordinates).

This method is called automatically when opening a netCDF file. It
should also be called after copying the axes that it refers to. It is
not intended to be called otherwise.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CFAxisVertical$configure_terms(axes)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{axes}}{List of \code{CFAxis} instances to use with the formula term
objects.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CFAxisVertical-parametric_subset"></a>}}
\if{latex}{\out{\hypertarget{method-CFAxisVertical-parametric_subset}{}}}
\subsection{Method \code{parametric_subset()}}{
This method subsets the parametric terms after the axis has
been subset. This method is called by \code{CFVariable$subset()} and
\verb{$profile()} methods and should not be called otherwise.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CFAxisVertical$parametric_subset(axes, start, count, index, dim_in, dim_out)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{axes}}{The list of dimensional axes that the data variable uses. The
axes are named after the original axes (some may have been renamed in
the preceding process).}

\item{\code{start}}{A vector of indices where to start reading in the terms, in
the original axis order.}

\item{\code{count}}{A vector of lengths to read along each axis, in the original
axis order.}

\item{\code{index}}{Optional index vector when auxiliary coordinates are to be
used to warp rotated planar coordinates to lat-long coordinates.}

\item{\code{dim_in}}{Optional list of dimensions to use with argument \code{index}
for the original data.}

\item{\code{dim_out}}{Optional list of dimensions to use with argument \code{index}
for the warped data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CFAxisVertical-append"></a>}}
\if{latex}{\out{\hypertarget{method-CFAxisVertical-append}{}}}
\subsection{Method \code{append()}}{
Append a vector of values at the end of the current values
of the axis. Boundary values are appended as well but if either this
axis or the \code{from} axis does not have boundary values, neither will the
resulting axis.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CFAxisVertical$append(from)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{from}}{An instance of \code{CFAxisVertical} whose values to append to the
values of this axis.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{CFAxisVertical} instance with values from this axis and
the \code{from} axis appended.
}
}
}
